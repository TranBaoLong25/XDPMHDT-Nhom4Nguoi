// --- GLOBAL CONFIG ---
const API_BASE_URL = "http://localhost"; // n·∫øu ch·∫°y qua nginx gateway, ƒë·ªÉ tr·ªëng l√† ƒë√∫ng
const TOKEN_KEY = "jwt_token";
const ADMIN_TOKEN_KEY = "admin_jwt_token";
let currentUserId = null;

// --- GLOBAL ELEMENTS ---
const navAuthLinks = document.getElementById("nav-auth-links");
let currentPageElement = document.getElementById("login-page");

// --- LOADING SPINNER ---
function showLoading() {
  const loader = document.getElementById("loading-spinner");
  if (loader) loader.classList.remove("hidden");
}
function hideLoading() {
  const loader = document.getElementById("loading-spinner");
  if (loader) loader.classList.add("hidden");
}

// --- TOAST ---
function showToast(message, isError = false) {
  const toast = document.createElement("div");
  toast.textContent = message;
  toast.className = `fixed bottom-5 right-5 p-4 rounded-lg shadow-lg text-white z-50 ${
    isError ? "bg-red-500" : "bg-green-500"
  }`;
  document.body.appendChild(toast);
  setTimeout(() => toast.remove(), 3000);
}

// --- CORE API REQUEST ---
async function apiRequestCore(tokenKey, endpoint, method = "GET", body = null) {
  showLoading();
  try {
    const headers = { "Content-Type": "application/json" };

    const token = localStorage.getItem(tokenKey || TOKEN_KEY);
    if (token) headers["Authorization"] = `Bearer ${token}`;

    const options = { method, headers };
    if (body) options.body = JSON.stringify(body);

    const url = endpoint.startsWith("http")
      ? endpoint
      : `${API_BASE_URL}${endpoint}`;

    const response = await fetch(url, options);

    const text = await response.text();
    let data;
    try {
      data = JSON.parse(text);
    } catch {
      data = { message: text };
    }

    if (!response.ok) {
      const errMsg =
        data.error || data.message || `HTTP Error ${response.status}`;
      throw { message: errMsg, status: response.status };
    }

    return data;
  } catch (err) {
    console.error("üö® API Request Error:", err);
    showToast(err.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh!", true);
    throw err;
  } finally {
    hideLoading();
  }
}

async function apiRequest(endpoint, method = "GET", body = null) {
  showLoading();
  try {
    const headers = { "Content-Type": "application/json" };
    const token = localStorage.getItem("jwt_token");
    if (token) {
      headers["Authorization"] = `Bearer ${token}`;
    }

    const options = { method, headers };
    if (body) {
      options.body = JSON.stringify(body);
    }

    const response = await fetch(`${API_BASE_URL}${endpoint}`, options);

    const responseData = await response
      .json()
      .catch(() => ({ message: "Operation successful" }));

    if (!response.ok) {
      throw new Error(
        responseData.error ||
          responseData.msg ||
          `HTTP error! status: ${response.status}`
      );
    }
    return responseData;
  } catch (error) {
    console.error("API Request Error:", error);
    showToast(error.message, true);
    throw error;
  } finally {
    hideLoading();
  }
}

// --- NAVIGATION (ƒê·ªãnh nghƒ©a DUY NH·∫§T m·ªôt l·∫ßn) ---
function navigateTo(pageId) {
  const nextPageElement = document.getElementById(`${pageId}-page`);
  document.querySelectorAll(".page").forEach((p) => {
    p.classList.add("hidden");
    p.classList.remove("active");
  });

  if (nextPageElement) {
    nextPageElement.classList.remove("hidden");
    nextPageElement.classList.add("active");
  }
  currentPageElement = nextPageElement;

  if (pageId === "profile") loadProfileDetails();
  if (pageId === "forget-password") resetForgetForm?.();

  // ‚úÖ LOGIC M·ªöI: T·∫£i danh s√°ch v·∫≠t t∆∞ khi chuy·ªÉn trang
  if (pageId === "inventory-list") loadInventoryList();
}

// --- AUTH NAVIGATION ---
function updateNav() {
  const token = localStorage.getItem(TOKEN_KEY);
  if (!navAuthLinks) return;

  navAuthLinks.innerHTML = token
    ? `
        <a href="#" onclick="navigateTo('profile')" class="nav-link text-gray-600 hover:bg-indigo-600 hover:text-white px-3 py-2 rounded-md text-sm font-medium">H·ªì S∆°</a>
        <a href="#" onclick="logout()" class="ml-4 bg-red-500 text-white px-3 py-2 rounded-md text-sm font-medium hover:bg-red-600">ƒêƒÉng Xu·∫•t</a>
        `
    : `
        <a href="#" onclick="navigateTo('login')" class="nav-link text-gray-600 hover:bg-indigo-600 hover:text-white px-3 py-2 rounded-md text-sm font-medium">ƒêƒÉng Nh·∫≠p</a>
        <a href="#" onclick="navigateTo('register')" class="ml-4 bg-green-500 text-white px-3 py-2 rounded-md text-sm font-medium hover:bg-green-600">ƒêƒÉng K√Ω</a>
        `;
}

function logout() {
  localStorage.removeItem(TOKEN_KEY);
  showToast("ƒê√£ ƒëƒÉng xu·∫•t!");
  updateNav();
  navigateTo("login");
}
// D√°n h√†m n√†y v√†o file frontend/scripts.js

function resetForgetForm() {
  // 1. L·∫•y c√°c √¥ input b·∫±ng ID (kh·ªõp v·ªõi HTML c·ªßa b·∫°n)
  const emailInput = document.getElementById("forget-email");
  const otpInput = document.getElementById("otp-code");
  const newPasswordInput = document.getElementById("new-password");

  // 2. ƒê·∫∑t gi√° tr·ªã c·ªßa ch√∫ng v·ªÅ r·ªóng
  if (emailInput) {
    emailInput.value = "";
  }
  if (otpInput) {
    otpInput.value = "";
  }
  if (newPasswordInput) {
    newPasswordInput.value = "";
  }

  // 3. (Quan tr·ªçng) ·∫®n form reset v√† hi·ªán l·∫°i form g·ª≠i OTP
  // ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o trang "Qu√™n m·∫≠t kh·∫©u" quay v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
  const forgetForm = document.getElementById("forget-password-form");
  const resetForm = document.getElementById("reset-password-form");

  if (forgetForm) {
    forgetForm.classList.remove("hidden"); // Hi·ªán form g·ª≠i email
  }
  if (resetForm) {
    resetForm.classList.add("hidden"); // ·∫®n form nh·∫≠p OTP/pass m·ªõi
  }

  // (T√πy ch·ªçn: ·∫®n c√°c th√¥ng b√°o l·ªói n·∫øu b·∫°n c√≥)
}

// --- PROFILE HANDLERS ---
function toggleProfileForm(forceShow) {
  const form = document.getElementById("profile-update-form");
  const btnBox = document.getElementById("update-profile-button-container");
  if (!form || !btnBox) return;

  const show = forceShow ?? form.classList.contains("hidden");
  if (show) {
    form.classList.remove("hidden");
    btnBox.classList.add("hidden");
  } else {
    form.classList.add("hidden");
    btnBox.classList.remove("hidden");
  }
}

async function loadProfileDetails() {
  try {
    const profile = await apiRequest("/api/profile-details", "POST", {
      subject: currentUserId?.toString(),
    });

    const div = document.getElementById("profile-details");
    if (!div) return;

    div.innerHTML = `
        <p><strong>H·ªç v√† t√™n:</strong> ${
          profile.full_name || "Ch∆∞a c·∫≠p nh·∫≠t"
        }</p>
        <p><strong>ƒêi·ªán tho·∫°i:</strong> ${
          profile.phone_number || "Ch∆∞a c·∫≠p nh·∫≠t"
        }</p>
        <p><strong>ƒê·ªãa ch·ªâ:</strong> ${profile.address || "Ch∆∞a c·∫≠p nh·∫≠t"}</p>
        <p><strong>Model Xe:</strong> ${
          profile.vehicle_model || "Ch∆∞a c·∫≠p nh·∫≠t"
        }</p>
        <p><strong>S·ªë VIN:</strong> ${profile.vin_number || "Ch∆∞a c·∫≠p nh·∫≠t"}</p>
        `;

    const fields = [
      ["profile-fullname", "full_name"],
      ["profile-phone", "phone_number"],
      ["profile-address", "address"],
      ["profile-vehicle-model", "vehicle_model"],
      ["profile-vin-number", "vin_number"],
    ];

    fields.forEach(([id, key]) => {
      const input = document.getElementById(id);
      if (input) input.value = profile[key] || "";
    });

    toggleProfileForm(false);
  } catch (err) {
    console.error("‚ùå Failed to load profile:", err);
    const div = document.getElementById("profile-details");
    if (div)
      div.innerHTML = "<p>Ch∆∞a c√≥ th√¥ng tin h·ªì s∆°. Vui l√≤ng c·∫≠p nh·∫≠t.</p>";
    toggleProfileForm(true);
  }
}

// --- FORM HANDLERS ---
document.getElementById("login-form")?.addEventListener("submit", async (e) => {
  e.preventDefault();
  const email_username = document.getElementById("login-email-username")?.value;
  const password = document.getElementById("login-password")?.value;

  try {
    const data = await apiRequestCore(null, "/api/login", "POST", {
      email_username,
      password,
    });

    if (data?.access_token) {
      localStorage.setItem(TOKEN_KEY, data.access_token);
      showToast("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
      updateNav();

      const token = data.access_token;
      const payload = JSON.parse(atob(token.split(".")[1]));
      currentUserId = payload.sub;

      navigateTo("home");
    }
  } catch (error) {
    console.error("Login failed:", error);
    showToast("Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!", true);
  }
});

document
  .getElementById("register-form")
  ?.addEventListener("submit", async (e) => {
    e.preventDefault();
    const username = document.getElementById("register-username")?.value;
    const email = document.getElementById("register-email")?.value;
    const password = document.getElementById("register-password")?.value;

    try {
      const data = await apiRequest("/api/register", "POST", {
        username,
        email,
        password,
      });
      showToast(data.message || "ƒêƒÉng k√Ω th√†nh c√¥ng!");
      e.target.reset();
      navigateTo("login");
    } catch (error) {
      console.error("Register failed:", error);
      showToast("L·ªói ƒëƒÉng k√Ω!", true);
    }
  });

document
  .getElementById("profile-update-form")
  ?.addEventListener("submit", async (e) => {
    e.preventDefault();

    const body = {
      full_name: document.getElementById("profile-fullname")?.value,
      phone: document.getElementById("profile-phone")?.value,
      address: document.getElementById("profile-address")?.value,
      vehicle_model: document.getElementById("profile-vehicle-model")?.value,
      vin_number: document.getElementById("profile-vin-number")?.value,
    };

    try {
      await apiRequest("/api/profile", "PUT", body);
      showToast("C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng!");
      loadProfileDetails();
      toggleProfileForm(false);
    } catch (error) {
      console.error("Update profile failed:", error);
      showToast("C·∫≠p nh·∫≠t th·∫•t b·∫°i!", true);
    }
  });

// --- INIT ---
document.addEventListener("DOMContentLoaded", () => {
  updateNav();
  const token = localStorage.getItem(TOKEN_KEY);

  if (token) {
    try {
      const payload = JSON.parse(atob(token.split(".")[1]));
      currentUserId = payload.sub;
      const now = Math.floor(Date.now() / 1000);
      if (payload.exp && payload.exp < now) logout();
      else navigateTo("home");
    } catch {
      logout();
    }
  } else {
    navigateTo("login");
  }
});
document.addEventListener("DOMContentLoaded", () => {
  // --- B·ªô n√£o cho Form 1: G·ª≠i M√£ OTP ---
  const forgetForm = document.getElementById("forget-password-form");
  if (forgetForm) {
    forgetForm.addEventListener("submit", async (event) => {
      event.preventDefault(); // NgƒÉn trang t·∫£i l·∫°i

      const emailInput = document.getElementById("forget-email");
      const email = emailInput.value;
      const submitButton = forgetForm.querySelector('button[type="submit"]');

      if (!email) {
        // Thay alert b·∫±ng showToast
        showToast("Vui l√≤ng nh·∫≠p email c·ªßa b·∫°n.", true);
        return;
      }

      // V√¥ hi·ªáu h√≥a n√∫t ƒë·ªÉ tr√°nh nh·∫•n ƒë√∫p
      submitButton.disabled = true;
      submitButton.textContent = "ƒêang g·ª≠i...";

      try {
        // 1. G·ªçi API (gi·∫£ s·ª≠ b·∫°n c√≥ h√†m apiRequestCore)
        const data = await window.apiRequestCore(
          null,
          "/api/send-otp",
          "POST",
          { email: email }
        );

        // 2. X·ª≠ l√Ω th√†nh c√¥ng
        showToast(
          data.message || "G·ª≠i OTP th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email."
        );

        // ·∫®n form g·ª≠i, hi·ªán form reset
        forgetForm.classList.add("hidden");
        document
          .getElementById("reset-password-form")
          .classList.remove("hidden");

        // L∆∞u email v√†o √¥ input ·∫©n
        document.getElementById("reset-email-hidden").value = email;
      } catch (error) {
        // 3. X·ª≠ l√Ω l·ªói
        console.error("L·ªói khi g·ª≠i OTP:", error);
        showToast(
          "G·ª≠i OTP th·∫•t b·∫°i. Email kh√¥ng t·ªìn t·∫°i ho·∫∑c c√≥ l·ªói x·∫£y ra.",
          true
        );
      } finally {
        // 4. K√≠ch ho·∫°t l·∫°i n√∫t
        submitButton.disabled = false;
        submitButton.textContent = "G·ª≠i M√£ OTP";
      }
    });
  }

  // --- B·ªô n√£o cho Form 2: ƒê·∫∑t L·∫°i M·∫≠t Kh·∫©u ---
  const resetForm = document.getElementById("reset-password-form");
  if (resetForm) {
    resetForm.addEventListener("submit", async (event) => {
      event.preventDefault(); // NgƒÉn trang t·∫£i l·∫°i

      // 1. L·∫•y d·ªØ li·ªáu
      const email = document.getElementById("reset-email-hidden").value;
      const otp = document.getElementById("otp-code").value;
      const newPassword = document.getElementById("new-password").value;
      const submitButton = resetForm.querySelector('button[type="submit"]');

      if (!otp || !newPassword) {
        showToast("Vui l√≤ng nh·∫≠p M√£ OTP v√† M·∫≠t kh·∫©u m·ªõi.", true);
        return;
      }

      // V√¥ hi·ªáu h√≥a n√∫t
      submitButton.disabled = true;
      submitButton.textContent = "ƒêang x·ª≠ l√Ω...";

      try {
        // 2. G·ªçi API
        const data = await window.apiRequestCore(
          null,
          "/api/reset-password",
          "POST",
          {
            email: email,
            otp: otp,
            new_password: newPassword,
          }
        );

        // 3. X·ª≠ l√Ω th√†nh c√¥ng
        showToast(
          data.message || "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p."
        );

        // Chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p
        navigateTo("login"); // S·ª≠ d·ª•ng navigateTo ƒë√£ s·ª≠a l·ªói
        resetForgetForm(); // G·ªçi h√†m reset (b·∫°n ƒë√£ th√™m ·ªü b∆∞·ªõc tr∆∞·ªõc)
      } catch (error) {
        // 4. X·ª≠ l√Ω l·ªói
        console.error("L·ªói khi reset m·∫≠t kh·∫©u:", error);
        showToast(
          "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th·∫•t b·∫°i. M√£ OTP kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ h·∫øt h·∫°n.",
          true
        );
      } finally {
        // 5. K√≠ch ho·∫°t l·∫°i n√∫t
        submitButton.disabled = false;
        submitButton.textContent = "ƒê·∫∑t L·∫°i M·∫≠t Kh·∫©u";
      }
    });
  }
});

// ========================================================
// ‚úÖ LOGIC INVENTORY M·ªöI
// ========================================================

function renderItemCard(item) {
  // S·ª≠ d·ª•ng Tailwind CSS cho m·ªôt card ƒë·∫πp m·∫Øt
  return `
        <div class="bg-white p-5 rounded-lg shadow-md border border-gray-200 hover:shadow-lg transition duration-200">
            <h3 class="text-xl font-semibold text-indigo-700">${item.name}</h3>
            <p class="text-gray-500 text-sm mt-1">M√£ Part: <span class="font-mono text-gray-700">${
              item.part_number
            }</span></p>
            
            <div class="mt-4 flex justify-between items-center">
                <div>
                    <p class="text-lg font-bold text-green-600">
                        ${new Intl.NumberFormat("vi-VN").format(item.price)}‚Ç´
                    </p>
                    <p class="text-xs text-gray-400">Gi√° tham kh·∫£o</p>
                </div>
                <div class="text-right">
                    <span class="text-sm font-medium text-gray-800 p-2 bg-indigo-100 rounded-full">
                        C√≤n: ${item.quantity || "Li√™n h·ªá"}
                    </span>
                </div>
            </div>
        </div>
    `;
}

async function loadInventoryList() {
  const container = document.getElementById("inventory-list-container");
  const loadingMessage = document.getElementById("inventory-loading-message");
  if (!container || !loadingMessage) return;

  // Hi·ªÉn th·ªã th√¥ng b√°o t·∫£i
  loadingMessage.classList.remove("hidden");
  container.innerHTML = "";

  try {
    // G·ªçi API Inventory Service (GET /api/inventory/items)
    const items = await apiRequestCore(
      null, // Kh√¥ng c·∫ßn token JWT cho user th∆∞·ªùng xem danh s√°ch
      "/api/inventory/items"
    );

    loadingMessage.classList.add("hidden");

    if (!items || items.length === 0) {
      container.innerHTML = `
                <div class="text-center py-12 bg-gray-50 rounded-lg">
                    <p class="text-lg text-gray-500">Hi·ªán t·∫°i ch∆∞a c√≥ ph·ª• t√πng n√†o ƒë∆∞·ª£c ni√™m y·∫øt.</p>
                </div>
            `;
      return;
    }

    // Render c√°c card v·∫≠t t∆∞
    container.innerHTML = items.map(renderItemCard).join("");
  } catch (error) {
    loadingMessage.classList.add("hidden");
    container.innerHTML = `
            <div class="text-center py-12 bg-red-100 text-red-700 rounded-lg border border-red-300">
                <p>L·ªói khi t·∫£i danh s√°ch v·∫≠t t∆∞. Vui l√≤ng th·ª≠ l·∫°i sau.</p>
            </div>
        `;
    console.error("Failed to load inventory list:", error);
  }
}
