services:
  # ===================== DATABASE (Postgres) =====================
  db-user:
    image: postgres:14-alpine
    container_name: user_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5433:5432" # Vẫn giữ để debug CSDL
    volumes:
      - user_data:/var/lib/postgresql/data
    networks:
      - ev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
  db-inventory:
    image: postgres:14-alpine
    container_name: inventory_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      # Sử dụng DB name riêng cho Inventory
      - POSTGRES_DB=ev_inventory_db # Khớp với DATABASE_URL trong .env
    ports:
      - "5434:5432" # Cổng debug khác với User DB (5433)
    volumes:
      - inventory_data:/var/lib/postgresql/data # Sử dụng volume riêng
    networks:
      - ev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ev_inventory_db"]
      interval: 5s
      timeout: 5s
      retries: 5
  db-booking:
    image: postgres:14-alpine
    container_name: booking_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=ev_booking_db
    ports:
      - "5435:5432" # Cổng debug khác (5433, 5434)
    volumes:
      - booking_data:/var/lib/postgresql/data
    networks:
      - ev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ev_booking_db"]
      interval: 5s
      timeout: 5s
      retries: 5
  # ===================== REDIS CACHE =====================
  redis:
    image: redis:alpine
    container_name: redis_cache
    ports:
      - "6379:6379" # Vẫn giữ để debug Redis
    networks:
      - ev_network

  # ===================== USER SERVICE (Backend) =====================
  user-service:
    build: ./services/user-service
    container_name: user-service
    command: gunicorn --bind 0.0.0.0:5000 "app:create_app()"
    volumes:
      - ./services/user-service:/app
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@user_db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://${REDIS_HOST}:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      # ... các biến env khác ...
    # KHÔNG cần 'ports' nữa vì chỉ Nginx mới gọi nó
    expose:
      - "5000"
    depends_on:
      db-user:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - ev_network
  inventory-service:
    build: ./services/inventory-service
    container_name: inventory-service
    # Port 8000 được định nghĩa trong Dockerfile của Inventory Service
    command: gunicorn --bind 0.0.0.0:8000 "app:create_app()"
    volumes:
      - ./services/inventory-service:/app
    environment:
      # Chuỗi kết nối đến DB Inventory
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db-inventory:5432/ev_inventory_db
      # Tái sử dụng các biến bảo mật toàn cục
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - INTERNAL_SERVICE_TOKEN=${INTERNAL_SERVICE_TOKEN}
    expose:
      - "8000" # Expose cổng 8000 cho Nginx thấy
    depends_on:
      db-inventory: # Phụ thuộc vào DB Inventory mới
        condition: service_healthy
    networks:
      - ev_network
  booking-service:
    build: ./services/booking-service
    container_name: booking-service
    command: gunicorn --bind 0.0.0.0:8001 "app:create_app()"
    volumes:
      - ./services/booking-service:/app
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db-booking:5432/ev_booking_db
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - INTERNAL_SERVICE_TOKEN=${INTERNAL_SERVICE_TOKEN}
      - USER_SERVICE_URL=http://user-service:5000 # URL nội bộ của User Service
    expose:
      - "8001"
    depends_on:
      db-booking:
        condition: service_healthy
      user-service: # Phụ thuộc User Service để gọi Internal API
        condition: service_started
    networks:
      - ev_network
  # ===================== FRONTEND SERVICE =====================
  frontend:
    build: ./frontend
    container_name: frontend_server
    # ⛔ BỎ 'ports' đi, không cần truy cập trực tiếp cổng 8080 nữa
    # ports:
    #   - "8080:80"
    # ✅ Dùng 'expose' để Nginx thấy port 80 (port nội bộ của frontend)
    expose:
      - "80"
    networks:
      - ev_network

  # ===================== API GATEWAY (NGINX) =====================
  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    container_name: api_gateway
    ports:
      - "80:80" # <-- CỔNG DUY NHẤT bạn sẽ truy cập
    depends_on:
      - user-service
      - frontend # Nginx cần frontend chạy trước
    networks:
      - ev_network

# ===================== NETWORKS & VOLUMES =====================
networks:
  ev_network:
    driver: bridge
volumes:
  user_data:
  inventory_data:
  booking_data:
