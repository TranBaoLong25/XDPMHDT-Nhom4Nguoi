version: "3.9"

services:
  # ===================== DATABASE USER (Postgres) =====================
  db-user:
    image: postgres:14-alpine
    container_name: user_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5433:5432" # Dành để debug CSDL User
    volumes:
      - user_data:/var/lib/postgresql/data
    networks:
      - ev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # ===================== DATABASE INVENTORY (Postgres) =====================
  db-inventory:
    image: postgres:14-alpine
    container_name: inventory_db
    environment:
      - POSTGRES_USER=ev_user
      - POSTGRES_PASSWORD=ev_pass
      - POSTGRES_DB=ev_inventory_db
    ports:
      - "5434:5432" # Dành để debug CSDL Inventory
    volumes:
      - inventory_data:/var/lib/postgresql/data
    networks:
      - ev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ev_user -d ev_inventory_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  # ===================== REDIS CACHE =====================
  redis:
    image: redis:alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    networks:
      - ev_network

  # ===================== USER SERVICE (Backend) =====================
  user-service:
    build: ./services/user-service
    container_name: user-service
    command: gunicorn --bind 0.0.0.0:5000 "app:create_app()"
    volumes:
      - ./services/user-service:/app
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db-user:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    expose:
      - "5000"
    depends_on:
      db-user:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - ev_network

  # ===================== INVENTORY SERVICE (Backend) =====================
  inventory-service:
    build: ./services/inventory-service
    container_name: inventory-service
    command: gunicorn --bind 0.0.0.0:5003 "app:create_app()"
    volumes:
      - ./services/inventory-service:/app
    environment:
      - DATABASE_URL=postgresql://ev_user:ev_pass@db-inventory:5432/ev_inventory_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    expose:
      - "5003"
    depends_on:
      db-inventory:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - ev_network

  # ===================== FRONTEND SERVICE =====================
  frontend:
    build: ./frontend
    container_name: frontend_server
    expose:
      - "80"
    networks:
      - ev_network

  # ===================== API GATEWAY (NGINX) =====================
  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    container_name: api_gateway
    ports:
      - "80:80" # <-- CỔNG DUY NHẤT bạn sẽ truy cập
    depends_on:
      - user-service
      - inventory-service
      - frontend
    networks:
      - ev_network

# ===================== NETWORKS & VOLUMES =====================
networks:
  ev_network:
    driver: bridge

volumes:
  user_data:
  inventory_data:
